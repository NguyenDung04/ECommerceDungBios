import User from "../../../../models/Users.js";
import { mongooseToObject } from "../../../../../util/mongoose.js";
import { logByRole } from "../../../../../middleware/logger.js";
import fs from "fs";
import path from "path";

export default {
  // L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ role = 'user'
  async getAll(req, res) {
    try {
      const users = await User.find({ role: "user" });

      res.status(200).json({
        success: true,
        message: `L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng`,
        data: users,
      });
    } catch (err) {
      res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng",
        error: err.message,
      });
    }
  },

  // üîí Ban ng∆∞·ªùi d√πng
  async banUser(req, res) {
    try {
      const { id } = req.params;
      const user = await User.findByIdAndUpdate(
        id,
        { isBanned: true },
        { new: true },
      );

      if (!user) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ ban",
        });
      }

      logByRole("admin", {
        actorId: req.session?.user?._id,
        actorType: "admin",
        action: "ban_user",
        target: user._id,
        extra: { email: user.email },
        ip: req.ip,
        userAgent: req.headers["user-agent"],
      });

      res.json({
        success: true,
        message: `ƒê√£ ban ng∆∞·ªùi d√πng ${user.email}`,
        data: mongooseToObject(user),
      });
    } catch (err) {
      console.error("[UserController] banUser error:", err);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi ban ng∆∞·ªùi d√πng",
        error: err.message,
      });
    }
  },

  // ‚úÖ Unban ng∆∞·ªùi d√πng
  async unbanUser(req, res) {
    try {
      const { id } = req.params;
      const user = await User.findByIdAndUpdate(
        id,
        { isBanned: false },
        { new: true },
      );

      if (!user) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ unban",
        });
      }

      logByRole("admin", {
        actorId: req.session?.user?._id,
        actorType: "admin",
        action: "unban_user",
        target: user._id,
        extra: { email: user.email },
        ip: req.ip,
        userAgent: req.headers["user-agent"],
      });

      res.json({
        success: true,
        message: `ƒê√£ unban ng∆∞·ªùi d√πng ${user.email}`,
        data: mongooseToObject(user),
      });
    } catch (err) {
      console.error("[UserController] unbanUser error:", err);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi unban ng∆∞·ªùi d√πng",
        error: err.message,
      });
    }
  },

  async updateBalance(req, res) {
    try {
      const userId = req.params.id;
      const { amount } = req.body;

      if (typeof amount !== "number") {
        return res
          .status(400)
          .json({ success: false, message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
      }

      const user = await User.findById(userId);
      if (!user) {
        return res
          .status(404)
          .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
      }

      // ‚úÖ Ki·ªÉm tra n·∫øu tr·ª´ ti·ªÅn m√† v∆∞·ª£t qu√° s·ªë d∆∞
      if (amount < 0 && Math.abs(amount) > user.currentMoney) {
        return res.status(400).json({
          success: false,
          message: `Kh√¥ng th·ªÉ tr·ª´ ${Math.abs(amount).toLocaleString()} ƒë v√¨ s·ªë d∆∞ hi·ªán t·∫°i ch·ªâ c√≤n ${user.currentMoney.toLocaleString()} ƒë`,
        });
      }

      logByRole("admin", {
        actorId: req.session?.user?._id,
        actorType: "admin",
        action: amount >= 0 ? "add_money" : "deduct_money",
        target: user._id,
        extra: {
          email: user.email,
          amountChanged: amount,
          newBalance: user.currentMoney + amount,
        },
        ip: req.ip,
        userAgent: req.headers["user-agent"],
      });

      user.currentMoney += amount;
      await user.save();

      res.json({
        success: true,
        message: `C·∫≠p nh·∫≠t s·ªë d∆∞ th√†nh c√¥ng. S·ªë d∆∞ m·ªõi: ${user.currentMoney.toLocaleString()} ƒë`,
        data: { currentMoney: user.currentMoney },
      });
    } catch (err) {
      console.error("[UserController] updateBalance error:", err);
      res
        .status(500)
        .json({ success: false, message: "L·ªói server", error: err.message });
    }
  },

  // üìÇ G·ªôp c·∫£ admin.log v√† user.log, l·ªçc theo targetRole
  async getAllLogsAffectingUser(req, res) {
    const userLogFile = path.join("logs", "user.log");
    const adminLogFile = path.join("logs", "admin.log");

    try {
      let logs = [];

      // ƒê·ªçc logs/user.log
      if (fs.existsSync(userLogFile)) {
        const lines = fs.readFileSync(userLogFile, "utf8").trim().split("\n");
        logs.push(
          ...lines
            .map((line) => {
              const match = line.match(/^(.*?) \[INFO\] (.*)$/);
              if (!match) return null;
              const [_, timestamp, raw] = match;
              try {
                return { timestamp, ...JSON.parse(raw) };
              } catch {
                return null;
              }
            })
            .filter((log) => log && log.actorType === "user"),
        );
      }

      // ƒê·ªçc logs/admin.log v√† l·ªçc theo targetRole: "user"
      if (fs.existsSync(adminLogFile)) {
        const lines = fs.readFileSync(adminLogFile, "utf8").trim().split("\n");
        logs.push(
          ...lines
            .map((line) => {
              const match = line.match(/^(.*?) \[INFO\] (.*)$/);
              if (!match) return null;
              const [_, timestamp, raw] = match;
              try {
                return { timestamp, ...JSON.parse(raw) };
              } catch {
                return null;
              }
            })
            .filter((log) => log && log.targetRole === "user"),
        );
      }

      // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
      logs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

      res.json({ success: true, data: logs });
    } catch (err) {
      res.status(500).json({
        success: false,
        message: "L·ªói khi ƒë·ªçc log li√™n quan user",
        error: err.message,
      });
    }
  },

  // üìä API th·ªëng k√™ t·ªïng quan ng∆∞·ªùi d√πng
  async getStats(req, res) {
    try {
      // Th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const firstDayOfMonth = new Date(
        today.getFullYear(),
        today.getMonth(),
        1,
      );
      const firstDayOfYear = new Date(today.getFullYear(), 0, 1);

      // Ch·∫°y song song c√°c truy v·∫•n th·ªëng k√™
      const [
        totalUsers,
        bannedUsers,
        newUsersToday,
        newUsersThisMonth,
        newUsersThisYear,
        totalBalance,
      ] = await Promise.all([
        User.countDocuments({ role: "user" }),
        User.countDocuments({ role: "user", isBanned: true }),
        User.countDocuments({ role: "user", createdAt: { $gte: today } }),
        User.countDocuments({
          role: "user",
          createdAt: { $gte: firstDayOfMonth },
        }),
        User.countDocuments({
          role: "user",
          createdAt: { $gte: firstDayOfYear },
        }),
        User.aggregate([
          { $match: { role: "user" } },
          { $group: { _id: null, total: { $sum: "$currentMoney" } } },
        ]),
      ]);

      const activeUsers = totalUsers - bannedUsers;
      const totalBalanceAmount =
        totalBalance.length > 0 ? totalBalance[0].total : 0;

      res.json({
        success: true,
        data: {
          totalUsers,
          activeUsers,
          bannedUsers,
          newUsersToday,
          newUsersThisMonth,
          newUsersThisYear,
          totalBalance: totalBalanceAmount,
        },
      });
    } catch (err) {
      console.error("[UserController] getStats error:", err);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi th·ªëng k√™ ng∆∞·ªùi d√πng",
        error: err.message,
      });
    }
  },
};
