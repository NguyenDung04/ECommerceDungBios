// üìÅ controllers/admin/ShopController.js
import User from "../../../../models/Users.js";
import { mongooseToObject } from "../../../../../util/mongoose.js";

export default {
  // L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ role = 'user'
  async getAll(req, res) {
    try {
      const shops = await User.find({ role: "shop" });

      res.status(200).json({
        success: true,
        message: `L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng`,
        data: shops,
      });
    } catch (err) {
      res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng",
        error: err.message,
      });
    }
  },

  async updateBalance(req, res) {
    try {
      const shopId = req.params.id;
      const { amount } = req.body;

      if (typeof amount !== "number") {
        return res
          .status(400)
          .json({ success: false, message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
      }

      const shop = await User.findById(shopId);
      if (!shop) {
        return res
          .status(404)
          .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
      }

      // ‚úÖ Ki·ªÉm tra n·∫øu tr·ª´ ti·ªÅn m√† v∆∞·ª£t qu√° s·ªë d∆∞
      if (amount < 0 && Math.abs(amount) > shop.currentMoney) {
        return res.status(400).json({
          success: false,
          message: `Kh√¥ng th·ªÉ tr·ª´ ${Math.abs(amount).toLocaleString()} ƒë v√¨ s·ªë d∆∞ hi·ªán t·∫°i ch·ªâ c√≤n ${shop.currentMoney.toLocaleString()} ƒë`,
        });
      }

      shop.currentMoney += amount;
      await shop.save();

      res.json({
        success: true,
        message: `C·∫≠p nh·∫≠t s·ªë d∆∞ th√†nh c√¥ng. S·ªë d∆∞ m·ªõi: ${shop.currentMoney.toLocaleString()} ƒë`,
        data: { currentMoney: shop.currentMoney },
      });
    } catch (err) {
      console.error("[ShopController] updateBalance error:", err);
      res
        .status(500)
        .json({ success: false, message: "L·ªói server", error: err.message });
    }
  },

  // üîí Ban ng∆∞·ªùi d√πng
  async banShop(req, res) {
    try {
      const { id } = req.params;
      const shop = await User.findByIdAndUpdate(
        id,
        { isBanned: true },
        { new: true },
      );

      if (!shop) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ ban",
        });
      }

      res.json({
        success: true,
        message: `ƒê√£ ban ng∆∞·ªùi d√πng ${shop.email}`,
        data: mongooseToObject(shop),
      });
    } catch (err) {
      console.error("[ShopController] banShop error:", err);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi ban ng∆∞·ªùi d√πng",
        error: err.message,
      });
    }
  },

  // ‚úÖ Unban ng∆∞·ªùi d√πng
  async unbanShop(req, res) {
    try {
      const { id } = req.params;
      const shop = await User.findByIdAndUpdate(
        id,
        { isBanned: false },
        { new: true },
      );

      if (!shop) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ unban",
        });
      }

      res.json({
        success: true,
        message: `ƒê√£ unban ng∆∞·ªùi d√πng ${shop.email}`,
        data: mongooseToObject(shop),
      });
    } catch (err) {
      console.error("[ShopController] unbanUser error:", err);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi unban ng∆∞·ªùi d√πng",
        error: err.message,
      });
    }
  },
};
